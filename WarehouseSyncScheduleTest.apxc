@isTest
public class WarehouseSyncScheduleTest {

    // Minimal mock to simulate HTTP callout response
    class WarehouseMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('[{"_id":"abc123","replacement":true,"quantity":100,"name":"Test Equipment","maintenanceperiod":180,"lifespan":24,"cost":999,"sku":"100004"}]');
            res.setStatusCode(200);
            return res;
        }
    }

    @isTest
    static void testScheduledJobWithCallout() {
        // Set the mock before the async callout runs
        Test.setMock(HttpCalloutMock.class, new WarehouseMock());

        Test.startTest();
        // Run the scheduled class execute method (pass null for SchedulableContext)
        new WarehouseSyncSchedule().execute(null);
        Test.stopTest();

        // After stopTest, your Queueable class with callout has run with the mock in place
        // You can add assertions to check that data is updated as expected
        
        Product2[] products = [SELECT Id, Warehouse_SKU__c FROM Product2 WHERE Warehouse_SKU__c = '100004'];
        System.assert(!products.isEmpty(), 'Product records should be upserted from mock callout');
    }
}
